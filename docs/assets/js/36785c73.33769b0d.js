"use strict";(self.webpackChunkstrudel_docs=self.webpackChunkstrudel_docs||[]).push([[7407],{9132:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>c,default:()=>g,frontMatter:()=>i,metadata:()=>d,toc:()=>p});var s=n(4848),o=n(8453),r=n(1662),a=n(7206);const i={title:"Project Structure"},c=void 0,d={id:"getting-started/project-structure",title:"Project Structure",description:"After creating a new project from the strudel-kit code, you will have the basic scaffolding for a STRUDEL-powered React app.",source:"@site/docs/getting-started/project-structure.mdx",sourceDirName:"getting-started",slug:"/getting-started/project-structure",permalink:"/strudel-kit/docs/getting-started/project-structure",draft:!1,unlisted:!1,editUrl:"https://github.com/strudel-science/strudel-kit/tree/main/docs/docs/getting-started/project-structure.mdx",tags:[],version:"current",frontMatter:{title:"Project Structure"},sidebar:"mainSidebar",previous:{title:"Quickstart",permalink:"/strudel-kit/docs/getting-started/quickstart"},next:{title:"Connecting Data",permalink:"/strudel-kit/docs/customization/connecting-data"}},l={},p=[];function u(e){const t={a:"a",code:"code",p:"p",pre:"pre",...(0,o.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.p,{children:"After creating a new project from the strudel-kit code, you will have the basic scaffolding for a STRUDEL-powered React app."}),"\n",(0,s.jsx)(t.p,{children:"The app comes pre-baked with all libraries in the STRUDEL Tech Stack, all the Task Flow templates currently available, a set of custom components that are used across the app, and some handy development and CI tools."}),"\n",(0,s.jsx)(t.p,{children:"There are quite a few directories and files that are part of the project structure. These handle things such as pages, shared components, routing, configurations, and continuous integration. Below is a breakdown of the project structure:"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-py",children:'\u251c\u2500\u2500 .github # GitHub actions and templates\n\u251c\u2500\u2500 .husky # Pre-commit hook to run before "git commit"\n\u251c\u2500\u2500 cypress # End-to-end testing\n\u251c\u2500\u2500 docs # Docs app, can be deleted or replaced with your own docs\n\u251c\u2500\u2500 public # Static files e.g. images, data, favicon\n\u251c\u2500\u2500 src\n\u2502  \u251c\u2500\u2500 components # Components that are shared across the app\n\u2502  \u251c\u2500\u2500 context # State variables and actions shared across the app\n\u2502  \u251c\u2500\u2500 hooks # Custom React functions for data fetching and more\n\u2502  \u251c\u2500\u2500 pages # File-based router entry point (TanStack Router)\n\u2502  \u2502  \u251c\u2500\u2500 compare-data # Task Flow template (/compare-data page)\n\u2502  \u2502  \u251c\u2500\u2500 contribute-data # Task Flow template (/contribute-data page)\n\u2502  \u2502  \u251c\u2500\u2500 explore-data # Task Flow template (/explore-data page)\n\u2502  \u2502  \u251c\u2500\u2500 monitor-activities # Task Flow template (/monitor-activites page)\n\u2502  \u2502  \u251c\u2500\u2500 playground # Playground template (/playground page)\n\u2502  \u2502  \u251c\u2500\u2500 run-computation # Task Flow template (/run-computation page)\n\u2502  \u2502  \u251c\u2500\u2500 search-data-repositories # Task Flow template (/search-data-repositories page)\n\u2502  \u2502  \u251c\u2500\u2500 __root.tsx # Wrapper component for all pages\n\u2502  \u2502  \u2514\u2500\u2500 index.tsx # Home page (/ page)\n\u2502  \u251c\u2500\u2500 types # TypeScript definitions used across the app\n\u2502  \u251c\u2500\u2500 utils # Utility functions used across the app\n\u2502  \u251c\u2500\u2500 App.tsx # Top-level app component\n\u2502  \u251c\u2500\u2500 declarations.d.ts # Type extensions for MUI\n\u2502  \u251c\u2500\u2500 index.css # Base CSS styles\n\u2502  \u251c\u2500\u2500 main.tsx # App entry point\n\u2502  \u251c\u2500\u2500 routeTree.gen.ts # Auto-generated route tree by TanStack Router (do not edit manually)\n\u2502  \u251c\u2500\u2500 theme.tsx # Full MUI theme configuration\n\u2502  \u2514\u2500\u2500 vite-env.d.ts\n\u251c\u2500\u2500 .eslintrc.json # ESLint configuration\n\u251c\u2500\u2500 .gitignore # Files for git to ignore\n\u251c\u2500\u2500 .lintstagedrc.json # Linstaged configuration (executed on precommit)\n\u251c\u2500\u2500 .prettierrc.json # Prettier configuration for code formatting\n\u251c\u2500\u2500 CODE_OF_CONDUCT.md\n\u251c\u2500\u2500 CONTRIBUTING.md\n\u251c\u2500\u2500 COPYRIGHT.md\n\u251c\u2500\u2500 LICENSE\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 cypress.config.ts # Testing configuration\n\u251c\u2500\u2500 index.html # HTML entry point\n\u251c\u2500\u2500 package-lock.json # Full dependency list\n\u251c\u2500\u2500 package.json # Dependencies and project metadata\n\u251c\u2500\u2500 tsconfig.json # TypeScript configuration\n\u251c\u2500\u2500 tsconfig.node.json # Vite-level TypeScript configuration\n\u251c\u2500\u2500 tsr.config.json # TanStack Router configuration\n\u2514\u2500\u2500 vite.config.ts # Vite configuration\n'})}),"\n",(0,s.jsxs)(t.p,{children:["The primary areas for customization purposes are ",(0,s.jsx)(t.code,{children:"src/pages"})," and ",(0,s.jsx)(t.code,{children:"src/components"}),". The ",(0,s.jsx)(t.code,{children:"src/pages"})," directory contains all of the unique pages and routing structure in the app. Each Task Flow template is a top-level directory in ",(0,s.jsx)(t.code,{children:"src/pages"}),'. To see a breakdown of a specific Task Flow, go to its page in the docs under the "Task Flows" section.']}),"\n",(0,s.jsxs)(t.p,{children:["You can also customize the global theme in ",(0,s.jsx)(t.code,{children:"src/theme.tsx"}),". This uses the MUI theme object to make app-wide style adjustments. See ",(0,s.jsx)(t.a,{href:"https://mui.com/material-ui/customization/default-theme/",children:"MUI's theme documentation"}),"."]}),"\n",(0,s.jsxs)(r.Ay,{container:!0,columnSpacing:2,rowSpacing:2,marginBottom:2,children:[(0,s.jsx)(r.Ay,{item:!0,sm:4,children:(0,s.jsx)(a.V,{href:"/strudel-kit/docs/task-flows/overview",target:"_self",label:"Task Flows"})}),(0,s.jsx)(r.Ay,{item:!0,sm:4,children:(0,s.jsx)(a.V,{href:"/strudel-kit/docs/guides/tutorials/basic-app-with-strudel/customize-taskflow",target:"_self",label:"Customize Your Task Flow"})}),(0,s.jsx)(r.Ay,{item:!0,sm:4,children:(0,s.jsx)(a.V,{href:"/strudel-kit/docs/guides/combine-sections",target:"_self",label:"Combining Sections"})}),(0,s.jsx)(r.Ay,{item:!0,sm:4,children:(0,s.jsx)(a.V,{href:"/strudel-kit/docs/guides/connect-task-flows-together",target:"_self",label:"Connecting Task Flows"})})]})]})}function g(e={}){const{wrapper:t}={...(0,o.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(u,{...e})}):u(e)}},7206:(e,t,n)=>{n.d(t,{V:()=>l});n(6540);var s=n(3416),o=n(9984),r=n(5292),a=n(8999),i=n(7733),c=n(7859),d=n(4848);const l=e=>{let{href:t,target:n="_blank",label:l,image:p,description:u}=e;return(0,d.jsx)(s.A,{sx:{background:"none",border:"1px solid",height:"100%",".MuiCardActionArea-root:hover":{textDecoration:"none"}},children:(0,d.jsx)(o.A,{href:t,target:n,sx:{height:"100%"},children:(0,d.jsx)(r.A,{children:(0,d.jsxs)(a.A,{spacing:1,children:[(0,d.jsxs)(a.A,{direction:"row",spacing:1,alignItems:"center",children:[p&&(0,d.jsx)(i.A,{sx:{height:"40px",position:"relative",img:{height:"100%",width:"auto"}},children:p}),(0,d.jsx)(c.A,{gutterBottom:!0,variant:"h6",component:"div",children:l})]}),u&&(0,d.jsx)(c.A,{variant:"body2",color:"text.secondary",children:u})]})})})})}}}]);