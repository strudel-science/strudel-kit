"use strict";(self.webpackChunkstrudel_docs=self.webpackChunkstrudel_docs||[]).push([[6502],{3034:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>s,default:()=>h,frontMatter:()=>i,metadata:()=>r,toc:()=>d});var o=t(4848),a=t(8453);const i={title:"Combining Sections"},s=void 0,r={id:"customization/combine-sections",title:"Combining Sections",description:"How to Combine Sections from Different Task Flows",source:"@site/docs/customization/combine-sections.md",sourceDirName:"customization",slug:"/customization/combine-sections",permalink:"/strudel-kit/docs/customization/combine-sections",draft:!1,unlisted:!1,editUrl:"https://github.com/strudel-science/strudel-kit/tree/main/docs/docs/customization/combine-sections.md",tags:[],version:"current",frontMatter:{title:"Combining Sections"},sidebar:"mainSidebar",previous:{title:"Connecting Data",permalink:"/strudel-kit/docs/customization/connecting-data"},next:{title:"Connecting Task Flows",permalink:"/strudel-kit/docs/customization/connect-task-flows-together"}},l={},d=[{value:"How to Combine Sections from Different Task Flows",id:"how-to-combine-sections-from-different-task-flows",level:2},{value:"1. Add both Task Flows to your app",id:"1-add-both-task-flows-to-your-app",level:3},{value:"2. Locate the file with the desired components",id:"2-locate-the-file-with-the-desired-components",level:3},{value:"3. Copy the components",id:"3-copy-the-components",level:3},{value:"4. Locate the destination file",id:"4-locate-the-destination-file",level:3},{value:"5. Paste the components",id:"5-paste-the-components",level:3},{value:"6. Update the imports",id:"6-update-the-imports",level:3},{value:"7. Connect new data sources",id:"7-connect-new-data-sources",level:3}];function c(e){const n={a:"a",code:"code",h2:"h2",h3:"h3",p:"p",pre:"pre",...(0,a.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.h2,{id:"how-to-combine-sections-from-different-task-flows",children:"How to Combine Sections from Different Task Flows"}),"\n",(0,o.jsx)(n.p,{children:"When using STRUDEL Kit it's common to want to take a section from one Task Flow and copy it into a different one. Doing so requires you to copy the desired components and elements from one Task Flow file into another file in the desired destination. The number of steps involved depends on the particular components but this guide will show you a simple use-case to get you started."}),"\n",(0,o.jsx)(n.p,{children:"In this example, you will copy the charts and table from the Results page in the Run Computation Task Flow into the Comparison page of the Compare Data Task Flow."}),"\n",(0,o.jsx)(n.h3,{id:"1-add-both-task-flows-to-your-app",children:"1. Add both Task Flows to your app"}),"\n",(0,o.jsx)(n.p,{children:"If you haven't already, add both the Run Computation and Compare Data Task Flows into your app:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{children:"cd src/pages\nnpx degit strudel-science/strudel-kit/src/pages/run-computation first-taskflow\nnpx degit strudel-science/strudel-kit/src/pages/compare-data second-taskflow\n"})}),"\n",(0,o.jsx)(n.h3,{id:"2-locate-the-file-with-the-desired-components",children:"2. Locate the file with the desired components"}),"\n",(0,o.jsxs)(n.p,{children:["The table and charts live in ",(0,o.jsx)(n.code,{children:"_layout/$id/_layout/results.tsx"})," inside the Task Flow folder that uses the Run Computation template. In this example that directory would be named ",(0,o.jsx)(n.code,{children:"first-taskflow"}),"."]}),"\n",(0,o.jsx)(n.h3,{id:"3-copy-the-components",children:"3. Copy the components"}),"\n",(0,o.jsxs)(n.p,{children:["Scan the components and elements in the final ",(0,o.jsx)(n.code,{children:"return"})," statement for the component. There you will find a ",(0,o.jsx)(n.code,{children:"<Grid>"})," component that contains two ",(0,o.jsx)(n.code,{children:"<Plot>"})," components and one ",(0,o.jsx)(n.code,{children:"<DataGrid>"})," component. Copy the whole ",(0,o.jsx)(n.code,{children:"<Grid>"})," component from ",(0,o.jsx)(n.code,{children:"<Grid>"})," to ",(0,o.jsx)(n.code,{children:"</Grid>"}),". Make sure to always include the closing section of components when you copy them. This will look like ",(0,o.jsx)(n.code,{children:"</Component>"})," for component that have inner children and ",(0,o.jsx)(n.code,{children:"/>"})," for components that don't."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-jsx",metastring:'title="results.tsx"',children:"<Grid container spacing={4}>\n  <Grid item sm={6}>\n    <Paper>\n      <Plot data={state.results.lineChart.data} layout={{}} />\n    </Paper>\n  </Grid>\n  <Grid item sm={6}>\n    <Paper>\n      <Plot data={state.results.barChart.data} layout={{}} />\n    </Paper>\n  </Grid>\n  <Grid item xs={12}>\n    <Paper>\n      <DataGrid\n        rows={state.results.table.data}\n        getRowId={(row) => row[state.results.table.dataIdField]}\n        columns={state.results.table.columns}\n        disableColumnSelector\n        disableRowSelectionOnClick\n      />\n    </Paper>\n  </Grid>\n</Grid>\n"})}),"\n",(0,o.jsx)(n.h3,{id:"4-locate-the-destination-file",children:"4. Locate the destination file"}),"\n",(0,o.jsxs)(n.p,{children:["The comparison page of the Compare Data Task Flow lives in ",(0,o.jsx)(n.code,{children:"_layout/compare.tsx"}),". In this example its parent directory would be named ",(0,o.jsx)(n.code,{children:"second-taskflow"}),". Open this file. This is where we want to paste our new components."]}),"\n",(0,o.jsx)(n.h3,{id:"5-paste-the-components",children:"5. Paste the components"}),"\n",(0,o.jsxs)(n.p,{children:["Let's say you want to put these new components underneath the comparison data table but you want them to fill the same width (i.e. you want them to be in the same container). You will find the ",(0,o.jsx)(n.code,{children:"<DataGrid>"})," component towards the bottom of the file. Paste the new components directly underneath the ",(0,o.jsx)(n.code,{children:"<Paper>"})," component that wraps around the ",(0,o.jsx)(n.code,{children:"<DataGrid>"})," but keep them inside of the ",(0,o.jsx)(n.code,{children:"<Container>"})," component:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-jsx",metastring:'title="compare.tsx"',children:"<Container\n  maxWidth=\"xl\"\n  sx={{\n    marginTop: 3,\n    marginBottom: 3,\n  }}\n>\n  <Paper\n    sx={{\n      '& .MuiDataGrid-columnHeader, .MuiDataGrid-cell': {\n        borderRight: '1px solid',\n        borderRightColor: 'neutral.main',\n      },\n      '& .compare-data--metric': {\n        fontWeight: 'bold',\n      },\n    }}\n  >\n    {state.comparing && (\n      <DataGrid\n        rows={state.comparisonData}\n        getRowId={(row) => row.metric}\n        columns={state.comparisonColumns}\n        disableRowSelectionOnClick\n        disableDensitySelector\n        disableColumnFilter\n      />\n    )}\n  </Paper>\n  <Grid container spacing={4}>\n    <Grid item sm={6}>\n      <Paper>\n        <Plot data={state.results.lineChart.data} layout={{}} />\n      </Paper>\n    </Grid>\n    <Grid item sm={6}>\n      <Paper>\n        <Plot data={state.results.barChart.data} layout={{}} />\n      </Paper>\n    </Grid>\n    <Grid item xs={12}>\n      <Paper>\n        <DataGrid\n          rows={state.results.table.data}\n          getRowId={(row) => row[state.results.table.dataIdField]}\n          columns={state.results.table.columns}\n          disableColumnSelector\n          disableRowSelectionOnClick\n        />\n      </Paper>\n    </Grid>\n  </Grid>\n</Container>\n"})}),"\n",(0,o.jsxs)(n.p,{children:["Let's also make a small change to the top-most ",(0,o.jsx)(n.code,{children:"<Grid>"})," component by adding some margin to the top:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-jsx",metastring:'title="compare.tsx"',children:"<Grid container spacing={4} marginTop={1}>\n"})}),"\n",(0,o.jsx)(n.h3,{id:"6-update-the-imports",children:"6. Update the imports"}),"\n",(0,o.jsxs)(n.p,{children:["Because we added new components to the ",(0,o.jsx)(n.code,{children:"compare.tsx"})," file, we need to import the ones that aren't already imported:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-js",metastring:'title="compare.tsx"',children:"import {\n  Box,\n  Button,\n  Container,\n  Grid,\n  Link,\n  Paper,\n  Stack,\n} from '@mui/material';\nimport Plot from 'react-plotly.js';\n"})}),"\n",(0,o.jsx)(n.p,{children:"Almost there. Now we just need to add source data to the new table, line chart, and bar chart."}),"\n",(0,o.jsx)(n.h3,{id:"7-connect-new-data-sources",children:"7. Connect new data sources"}),"\n",(0,o.jsxs)(n.p,{children:["In a real app, the data for these components would likely come from an API or external file but in this example we are going to place the data directly in the component. See the ",(0,o.jsx)(n.a,{href:"https://strudel.science/strudel-kit/docs/guides/connecting-data",children:"Connecting Data"})," guide for more information about connecting data sources."]}),"\n",(0,o.jsx)(n.p,{children:"Here is the line chart component with some example data plugged in:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-js",metastring:'title="compare.tsx"',children:"<Plot\n  data={[\n    {\n      x: [1, 2, 3, 4],\n      y: [10, 15, 13, 17],\n      type: 'scatter',\n    },\n    {\n      x: [1, 2, 3, 4],\n      y: [16, 5, 11, 9],\n      type: 'scatter',\n    },\n    {\n      x: [1, 2, 3, 4],\n      y: [21, 17, 4, 10],\n      type: 'scatter',\n    },\n  ]}\n  layout={{}}\n/>\n"})}),"\n",(0,o.jsx)(n.p,{children:"And here is bar chart component with some example data plugged in:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-js",metastring:'title="compare.tsx"',children:"<Plot\n  data={[\n    {\n      x: ['Tulip', 'Orchid', 'Sunflower'],\n      y: [20, 14, 23],\n      type: 'bar',\n    },\n  ]}\n  layout={{}}\n/>\n"})}),"\n",(0,o.jsxs)(n.p,{children:["And finally, populate the ",(0,o.jsx)(n.code,{children:"rows"})," prop and the ",(0,o.jsx)(n.code,{children:"columns"})," prop of the ",(0,o.jsx)(n.code,{children:"<DataGrid>"})," component with some example values like below:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-js",metastring:'title="compare.tsx"',children:"<DataGrid\n  rows={[\n    {\n      sample_id: 0,\n      type: 'tulip',\n      latitude: 37.8715,\n      longitude: -122.2727,\n      'elevation (m)': 52,\n      notes: 'healthy growth',\n    },\n    {\n      sample_id: 1,\n      type: 'tulip',\n      latitude: 38.2341,\n      longitude: -121.4875,\n      'elevation (m)': 52,\n      notes: 'healthy growth',\n    },\n    {\n      sample_id: 2,\n      type: 'sunflower',\n      latitude: 37.2338,\n      longitude: -121.4899,\n      'elevation (m)': 52,\n      notes: 'unhealthy coloration',\n    },\n    {\n      sample_id: 3,\n      type: 'orchid',\n      latitude: 37.8758,\n      longitude: -122.2732,\n      'elevation (m)': 52,\n      notes: 'healthy growth',\n    },\n    {\n      sample_id: 4,\n      type: 'orchid',\n      latitude: 37.8715,\n      longitude: -122.2727,\n      'elevation (m)': 52,\n      notes: 'fungal infection',\n    },\n  ]}\n  getRowId={(row) => row['sample_id']}\n  columns={[\n    {\n      field: 'sample_id',\n    },\n    {\n      field: 'type',\n    },\n    {\n      field: 'latitude',\n      type: 'number',\n    },\n    {\n      field: 'longitude',\n      type: 'number',\n    },\n    {\n      field: 'elevation (m)',\n      type: 'number',\n    },\n    {\n      field: 'notes',\n    },\n  ]}\n  disableColumnSelector\n  disableRowSelectionOnClick\n/>\n"})})]})}function h(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(c,{...e})}):c(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>s,x:()=>r});var o=t(6540);const a={},i=o.createContext(a);function s(e){const n=o.useContext(i);return o.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:s(e.components),o.createElement(i.Provider,{value:n},e.children)}}}]);